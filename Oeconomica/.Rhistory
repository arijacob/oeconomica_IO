season_func <- function(month) {
season <- ifelse(month %in% c(12, 1, 2), "winter",
ifelse(month %in% c(3, 4, 5), "spring",
ifelse(month %in% c(6, 7, 8), "summer", "fall")))
return(season)
}
df = df %>%
mutate(year = year(date), month = month(date)) %>%
mutate(season = season_func(month)) %>%
select(-month)
reg2 = lm(log(dominant_sales) ~ conduct_period +
factor(state) + log(temp) + log(milk_price) + log(eggs_price) +
log(sugar_price) + log(diesel_price) +
log(dominant_wage) + log(waffle_cone_price) + log(cpi_less_food_and_energy) +
log(unemployment_rate) + factor(year) + factor(season) + log(defendant_6_wage) + log(defendant_4_wage) + log(defendant_5_wage), data = df)
View(df)
class(df$temp)
levels(df$year)
df = df %>%
mutate(date = as.Date(date)) %>%
mutate(state = as.factor(state))
season_func <- function(month) {
season <- ifelse(month %in% c(12, 1, 2), "winter",
ifelse(month %in% c(3, 4, 5), "spring",
ifelse(month %in% c(6, 7, 8), "summer", "fall")))
return(season)
}
df = df %>%
mutate(year = year(date), month = month(date)) %>%
mutate(season = season_func(month)) %>%
select(-month) %>%
mutate(year = factor(year),
season = factor(season),
temp = factor(temp))
r
reg2 = lm(log(dominant_sales) ~ conduct_period +
factor(state) + log(temp) + log(milk_price) + log(eggs_price) +
log(sugar_price) + log(diesel_price) +
log(dominant_wage) + log(waffle_cone_price) + log(cpi_less_food_and_energy) +
log(unemployment_rate) + factor(year) + factor(season) + log(defendant_6_wage) + log(defendant_4_wage) + log(defendant_5_wage), data = df)
df <- read.csv('https://raw.githubusercontent.com/arijacob/oeconomica_IO/main/Oeconomica/Master-data.csv')
df = df %>%
mutate(date = as.Date(date)) %>%
mutate(state = as.factor(state))
season_func <- function(month) {
season <- ifelse(month %in% c(12, 1, 2), "winter",
ifelse(month %in% c(3, 4, 5), "spring",
ifelse(month %in% c(6, 7, 8), "summer", "fall")))
return(season)
}
df = df %>%
mutate(year = year(date), month = month(date)) %>%
mutate(season = season_func(month)) %>%
select(-month) %>%
mutate(year = factor(year),
season = factor(season),
state = factor(state))
reg2 = lm(log(dominant_sales) ~ conduct_period +
factor(state) + log(temp) + log(milk_price) + log(eggs_price) +
log(sugar_price) + log(diesel_price) +
log(dominant_wage) + log(waffle_cone_price) + log(cpi_less_food_and_energy) +
log(unemployment_rate) + factor(year) + factor(season) + log(defendant_6_wage) + log(defendant_4_wage) + log(defendant_5_wage), data = df)
levels(df$state)
levels(df$year)
levels(df$season)
reg2 = lm(log(dominant_sales) ~ conduct_period +
state + log(temp) + log(milk_price) + log(eggs_price) +
log(sugar_price) + log(diesel_price) +
log(dominant_wage) + log(waffle_cone_price) + log(cpi_less_food_and_energy) +
log(unemployment_rate) + year + season + log(defendant_6_wage) + log(defendant_4_wage) + log(defendant_5_wage), data = df)
summary(reg2)
df <- read.csv('https://raw.githubusercontent.com/arijacob/oeconomica_IO/main/Oeconomica/Master-data.csv')
df = df %>%
mutate(date = as.Date(date)) %>%
mutate(state = as.factor(state))
season_func = function(month) {
if (month %in% c(12, 1, 2)) {
return("winter")
} else if (month %in% c(3, 4, 5)) {
return("spring")
} else if (month %in% c(6, 7, 8)) {
return("summer")
} else {
return("fall")
}
}
df = df %>%
mutate(year = year(date), month = month(date)) %>%
mutate(season = season_func(month)) %>%
select(-month) %>%
mutate(year = factor(year),
season = factor(season),
state = factor(state))
season_func = function(month) {
if (month %in% c(12, 1, 2)) {
season = "winter"
} else if (month %in% c(3, 4, 5)) {
season = "spring"
} else if (month %in% c(6, 7, 8)) {
season = "summer"
} else {
season = "fall"
}
return(season)
}
df = df %>%
mutate(year = year(date), month = month(date)) %>%
mutate(season = season_func(month)) %>%
select(-month) %>%
mutate(year = factor(year),
season = factor(season),
state = factor(state))
df = df %>%
mutate(date = as.Date(date)) %>%
mutate(state = as.factor(state))
season_func = function(month) {
if (month %in% c(12, 1, 2)) {
season = "winter"
} else if (month %in% c(3, 4, 5)) {
season = "spring"
} else if (month %in% c(6, 7, 8)) {
season = "summer"
} else {
season = "fall"
}
return(season)
}
df = df %>%
mutate(year = year(date), month = month(date)) %>%
mutate(season = season_func(month)) %>%
select(-month) %>%
mutate(year = factor(year),
season = factor(season),
state = factor(state))
df = df %>%
mutate(year = year(date), month = month(date))
df = df %>%
mutate(season = season_func(month))
season_func <- function(month) {
season <- ifelse(month %in% c(12, 1, 2), "winter",
ifelse(month %in% c(3, 4, 5), "spring",
ifelse(month %in% c(6, 7, 8), "summer", "fall")))
return(season)
}
df = df %>%
mutate(year = year(date), month = month(date)) %>%
mutate(season = season_func(month)) %>%
select(-month) %>%
mutate(year = factor(year),
season = factor(season),
state = factor(state))
reg2 = lm(log(dominant_sales) ~ conduct_period +
state + log(temp) + log(milk_price) + log(eggs_price) +
log(sugar_price) + log(diesel_price) +
log(dominant_wage) + log(waffle_cone_price) + log(cpi_less_food_and_energy) +
log(unemployment_rate) + year + season + log(defendant_6_wage) + log(defendant_4_wage) + log(defendant_5_wage), data = df)
#regression table latex export
stargazer(reg2)
#calculation of damages, this is with reg not reg2 bc
#i ran into issues, but reg is more conservative also hopefully we can fix and
#then just switch to reg2
df = df %>%
mutate(difference = exp(predicted_zero) - dominant_sales)
df_zero = df %>%
mutate(conduct_period = 0)
#reg prediction
df = df %>%
mutate(predicted = predict(reg, newdata = df),
predicted_zero =  predict(reg, newdata = df_zero))
#reg2 prediction
df = df %>%
mutate(predicted = predict(reg2, newdata = df),
predicted_zero =  predict(reg2, newdata = df_zero))
#calculation of damages, this is with reg not reg2 bc
#i ran into issues, but reg is more conservative also hopefully we can fix and
#then just switch to reg2
df = df %>%
mutate(difference = exp(predicted_zero) - dominant_sales)
sum(df$difference[df$conduct_period == 1])
#reg2 prediction
df = df %>%
mutate(predicted = predict(reg2, newdata = df),
predicted_zero =  predict(reg2, newdata = df_zero))
levels(df$state)
view(df %>%)
df %>%
filter(state == "NJ" | state == "NY")
df_test = df %>%
filter(state == "NJ" | state == "NY")
df_test
view(df_test)
reg2 = lm(log(dominant_sales) ~ conduct_period +
state + log(temp) + log(milk_price) + log(eggs_price) +
log(sugar_price) + log(diesel_price) +
log(dominant_wage) + log(waffle_cone_price) + log(cpi_less_food_and_energy) +
log(unemployment_rate) + year + season + log(defendant_6_wage) + log(defendant_4_wage) + log(defendant_5_wage), data = df)
table(df$state)
table(df$season)
table(df$year)
reg = lm(log(dominant_sales) ~ conduct_period +
factor(state) + log(temp) + log(milk_price) +
log(sugar_price) + log(eggs_price) + log(diesel_price) +
log(dominant_wage) + log(waffle_cone_price) + log(cpi_less_food_and_energy) +
log(unemployment_rate) + factor(year) + factor(season), data = df)
reg2 = lm(log(dominant_sales) ~ conduct_period +
factor(state) + log(temp) + log(milk_price) + log(eggs_price) +
log(sugar_price) + log(diesel_price) +
log(dominant_wage) + log(waffle_cone_price) + log(cpi_less_food_and_energy) +
log(unemployment_rate) + factor(year) + factor(season) + log(defendant_6_wage) + log(defendant_4_wage) + log(defendant_5_wage), data = df)
sum(is.na(df$state))
sum(is.na(df$year))
sum(is.na(df$season))
# Exclude observations with missing values in defendant wages
df_complete <- df[complete.cases(df$defendant_6_wage, df$defendant_4_wage, df$defendant_5_wage), ]
# Run the regression on the subsetted data
reg2 <- lm(log(dominant_sales) ~ conduct_period +
state + log(temp) + log(milk_price) + log(eggs_price) +
log(sugar_price) + log(diesel_price) +
log(dominant_wage) + log(waffle_cone_price) + log(cpi_less_food_and_energy) +
log(unemployment_rate) + year + season + log(defendant_6_wage) +
log(defendant_4_wage) + log(defendant_5_wage), data = df_complete)
df <- read.csv('https://raw.githubusercontent.com/arijacob/oeconomica_IO/main/Oeconomica/Master-data.csv')
df = df %>%
mutate(date = as.Date(date)) %>%
mutate(state = as.factor(state))
season_func <- function(month) {
season <- ifelse(month %in% c(12, 1, 2), "winter",
ifelse(month %in% c(3, 4, 5), "spring",
ifelse(month %in% c(6, 7, 8), "summer", "fall")))
return(season)
}
df = df %>%
mutate(year = year(date), month = month(date)) %>%
mutate(season = season_func(month)) %>%
select(-month) %>%
mutate(year = factor(year),
season = factor(season),
state = factor(state))
# Exclude observations with missing values in defendant wages
df_complete <- df[complete.cases(df$defendant_6_wage, df$defendant_4_wage, df$defendant_5_wage), ]
# Run the regression on the subsetted data
reg2 = lm(log(dominant_sales) ~ conduct_period +
factor(state) + log(temp) + log(milk_price) + log(eggs_price) +
log(sugar_price) + log(diesel_price) +
log(dominant_wage) + log(waffle_cone_price) + log(cpi_less_food_and_energy) +
log(unemployment_rate) + factor(year) + factor(season) + log(defendant_6_wage) + log(defendant_4_wage) + log(defendant_5_wage), data = df_complete)
summary(reg2)
View(df_complete)
library(tune)
library(ranger)
lm_model =
linear_reg() %>%
set_engine("lm")
library(tune)
library(ranger)
library(tidyverse)
library(ggthemes)
library(zoo)
library(stargazer)
lm_model =
linear_reg() %>%
set_engine("lm")
library(tidymodels)
lm_model =
linear_reg() %>%
set_engine("lm")
doms_rec =
recipe(dominant_sales ~conduct_period +
factor(state) + log(temp) + log(milk_price) + log(eggs_price) +
log(sugar_price) + log(diesel_price) +
log(dominant_wage) + log(waffle_cone_price) + log(cpi_less_food_and_energy) +
log(unemployment_rate) + factor(year) +
factor(season) + log(defendant_6_wage) + log(defendant_4_wage) +
log(defendant_5_wage), data = df)
?step_log
doms_rec =
recipe(dominant_sales ~conduct_period +
state + temp + milk_price + eggs_price +
sugar_price+ diesel_price +
dominant_wage + waffle_cone_price + cpi_less_food_and_energy +
unemployment_rate + year +
season + defendant_6_wage + defendant_4_wage +
defendant_5_wage, data = df) %>%
step_log(all_numeric(), offset = 1) %>%
step_dummy(state, year, season)
lm_model = linear_reg() %>%
set_engine("lm")
lm_wflow <-
workflow() %>%
add_model(lm_model) %>%
add_recipe(doms_rec)
lm_fit <- fit(lm_wflow, df)
lm_fit
lm_model =
linear_reg() %>%
set_engine("lm")
vars_to_log <- c("dominant_sales", "temp", "milk_price", "eggs_price",
"sugar_price", "diesel_price", "dominant_wage",
"waffle_cone_price", "cpi_less_food_and_energy",
"unemployment_rate", "defendant_6_wage", "defendant_4_wage",
"defendant_5_wage")
doms_rec =
recipe(dominant_sales ~conduct_period +
state + temp + milk_price + eggs_price +
sugar_price+ diesel_price +
dominant_wage + waffle_cone_price + cpi_less_food_and_energy +
unemployment_rate + year +
season + defendant_6_wage + defendant_4_wage +
defendant_5_wage, data = df) %>%
step_log(all_of(vars_to_log), offset = 1) %>%
step_dummy(state, year, season)
lm_model = linear_reg() %>%
set_engine("lm")
lm_wflow <-
workflow() %>%
add_model(lm_model) %>%
add_recipe(doms_rec)
lm_fit <- fit(lm_wflow, df)
lm_fit
#regression table latex export
stargazer(lm_fit)
df_zero = df %>%
mutate(conduct_period = 0)
#reg prediction
df = df %>%
mutate(predicted = predict(lm_fit, newdata = df),
predicted_zero =  predict(lm_fit, newdata = df_zero))
df_zero = df %>%
mutate(conduct_period = 0)
df_predicted = augment(lm_fit, new_data = df)
df_predicted_zero = augment(lm_fit, new_data = df_zero)
View(df_predicted_zero)
View(df_predicted)
#reg2 prediction
df_predicted = df_predicted %>%
mutate(predicted_zero = df_predicted_zero$.pred)
#Comparing actual sales to average with rolling mean (for reg2)
ggplot(data = df_predicted, aes(x = date)) +
geom_line(aes(y = rollmean(log(dominant_sales), k=20, align='right',  fill = NA), color = "Actual Sales")) +  # actual sales logged
geom_line(aes(y = rollmean(predicted_zero, k=20, align='right',  fill = NA), color = "Predicted Sales assuming no misconduct")) + # Regression line with 'conduct_period' set to zero
scale_color_manual(values = c(
'Actual Sales' = 'darkgreen',
'Predicted Sales assuming no misconduct' = 'purple')) +
labs(y = "Sales (logged)", color = 'Legend') +
theme_excel_new()
#Comparing actual sales to average with rolling mean (for reg2)
ggplot(data = df_predicted, aes(x = date)) +
geom_line(aes(y = rollmean(log(dominant_sales), k=20, align='right',  fill = NA), color = "Actual Sales")) +  # actual sales logged
geom_line(aes(y = predicted_zero, color = "Predicted Sales assuming no misconduct")) + # Regression line with 'conduct_period' set to zero
scale_color_manual(values = c(
'Actual Sales' = 'darkgreen',
'Predicted Sales assuming no misconduct' = 'purple')) +
labs(y = "Sales (logged)", color = 'Legend') +
theme_excel_new()
#Comparing actual sales to average with rolling mean (for reg2)
ggplot(data = df_predicted, aes(x = date)) +
geom_line(aes(y = rollmean(log(dominant_sales), k=20, align='right',  fill = NA), color = "Actual Sales")) +  # actual sales logged
geom_line(aes(y = predicted_zero, color = "Predicted Sales assuming no misconduct")) + # Regression line with 'conduct_period' set to zero
scale_color_manual(values = c(
'Actual Sales' = 'darkgreen',
'Predicted Sales assuming no misconduct' = 'purple')) +
labs(y = "Sales (logged)", color = 'Legend') +
theme_excel_new()
#Comparing actual sales to average with rolling mean (for reg2)
ggplot(data = df_predicted, aes(x = date)) +
geom_line(aes(y = log(dominant_sales), color = "Actual Sales")) +  # actual sales logged
geom_line(aes(y = predicted_zero, color = "Predicted Sales assuming no misconduct")) + # Regression line with 'conduct_period' set to zero
scale_color_manual(values = c(
'Actual Sales' = 'darkgreen',
'Predicted Sales assuming no misconduct' = 'purple')) +
labs(y = "Sales (logged)", color = 'Legend') +
theme_excel_new()
ggplot(df_predicted, aes(x = log(dominant_sales), y = predicted_zero)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Actual Sales", y = "Predicted Sales") +
ggtitle("Actual vs. Predicted Sales")
#Comparing actual sales to average with rolling mean (for reg2)
ggplot(data = df_predicted, aes(x = date)) +
geom_line(aes(y = log(dominant_sales), color = "Actual Sales")) +  # actual sales logged
geom_line(aes(y = predicted_zero, color = "Predicted Sales assuming no misconduct")) + # Regression line with 'conduct_period' set to zero
scale_color_manual(values = c(
'Actual Sales' = 'darkgreen',
'Predicted Sales assuming no misconduct' = 'purple')) +
labs(y = "Sales (logged)", color = 'Legend') +
theme_excel_new()
df_clean <- na.omit(df_zero)
i
df_predicted_zero = augment(lm_fit, new_data = df_clean)
#with predicted values
df_predicted = df_predicted %>%
mutate(predicted_zero = df_predicted_zero$.pred)
View(df_predicted)
View(df_clean)
?predict
predict
?predict
df = df %>%
mutate(predicted = predict(reg, newdata = df),
predicted_zero =  predict(reg, newdata = df_zero))
#Comparing actual sales to average with rolling mean (for reg2)
ggplot(data = df, aes(x = date)) +
geom_line(aes(y = rollmean(log(dominant_sales), k=20, align='right',  fill = NA), color = "Actual Sales")) +  # actual sales logged
geom_line(aes(y = rollmean(predicted_zero, k=20, align='right',  fill = NA), color = "Predicted Sales assuming no misconduct")) + # Regression line with 'conduct_period' set to zero
scale_color_manual(values = c(
'Actual Sales' = 'darkgreen',
'Predicted Sales assuming no misconduct' = 'purple')) +
labs(y = "Sales (logged)", color = 'Legend') +
theme_excel_new()
library(tidyverse)
library(ggthemes)
library(zoo)
library(stargazer)
df <- read.csv('https://raw.githubusercontent.com/arijacob/oeconomica_IO/main/Oeconomica/Master-data.csv')
df = df %>%
mutate(date = as.Date(date)) %>%
mutate(state = as.factor(state))
season_func <- function(month) {
season <- ifelse(month %in% c(12, 1, 2), "winter",
ifelse(month %in% c(3, 4, 5), "spring",
ifelse(month %in% c(6, 7, 8), "summer", "fall")))
return(season)
}
df = df %>%
mutate(year = year(date), month = month(date)) %>%
mutate(season = season_func(month)) %>%
select(-month) %>%
mutate(year = factor(year),
season = factor(season),
state = factor(state))
reg = lm(log(dominant_sales) ~ conduct_period +
factor(state) + log(temp) + log(milk_price) +
log(sugar_price) + log(eggs_price) + log(diesel_price) +
log(dominant_wage) + log(waffle_cone_price) + log(cpi_less_food_and_energy) +
log(unemployment_rate) + factor(year) + factor(season), data = df)
library(tune)
library(ranger)
library(tidymodels)
lm_model =
linear_reg() %>%
set_engine("lm")
vars_to_log <- c("dominant_sales", "temp", "milk_price", "eggs_price",
"sugar_price", "diesel_price", "dominant_wage",
"waffle_cone_price", "cpi_less_food_and_energy",
"unemployment_rate", "defendant_6_wage", "defendant_4_wage",
"defendant_5_wage")
doms_rec =
recipe(dominant_sales ~conduct_period +
state + temp + milk_price + eggs_price +
sugar_price+ diesel_price +
dominant_wage + waffle_cone_price + cpi_less_food_and_energy +
unemployment_rate + year +
season + defendant_6_wage + defendant_4_wage +
defendant_5_wage, data = df) %>%
step_log(all_of(vars_to_log), offset = 1) %>%
step_dummy(state, year, season)
lm_model = linear_reg() %>%
set_engine("lm")
lm_wflow <-
workflow() %>%
add_model(lm_model) %>%
add_recipe(doms_rec)
lm_fit <- fit(lm_wflow, df)
#REGRESSION GRAPH COMPARIOSN
df_zero = df %>%
mutate(conduct_period = 0)
df = df %>%
mutate(predicted = predict(reg, newdata = df),
predicted_zero =  predict(reg, newdata = df_zero))
View(df)
#Comparing actual sales to average with rolling mean (for reg2)
ggplot(data = df, aes(x = date)) +
geom_line(aes(y = rollmean(log(dominant_sales), k=20, align='right',  fill = NA), color = "Actual Sales")) +  # actual sales logged
geom_line(aes(y = rollmean(predicted_zero, k=20, align='right',  fill = NA), color = "Predicted Sales assuming no misconduct")) + # Regression line with 'conduct_period' set to zero
scale_color_manual(values = c(
'Actual Sales' = 'darkgreen',
'Predicted Sales assuming no misconduct' = 'purple')) +
labs(y = "Sales (logged)", color = 'Legend') +
theme_excel_new()
#calculation of damages, this is with reg not reg2 bc
#i ran into issues, but reg is more conservative also hopefully we can fix and
#then just switch to reg2
df = df %>%
mutate(difference = exp(predicted_zero) - dominant_sales)
sum(df$difference[df$conduct_period == 1])
df = df %>%
mutate(predicted = predict(lm_fit, newdata = df),
predicted_zero =  predict(lm_fit, newdata = df_zero))
df = df %>%
mutate(
predicted_zero =  predict(lm_fit, newdata = df_zero))
df = df %>%
mutate(predicted_zero =  predict(lm_fit, new_data = df_zero))
?predict()
lm_fit_zero <- fit(lm_wflow, df_zero)
df = df %>%
mutate(predicted_zero =  predict(lm_fit_zero))
df = df %>%
mutate(predicted_zero =  predict(lm_fit_zero, newdata = df_zero))
df = df %>%
mutate(predicted_zero =  predict(lm_fit_zero, new_data = df_zero))
#Comparing actual sales to average with rolling mean (for reg2)
ggplot(data = df, aes(x = date)) +
geom_line(aes(y = rollmean(log(dominant_sales), k=20, align='right',  fill = NA), color = "Actual Sales")) +  # actual sales logged
geom_line(aes(y = rollmean(predicted_zero, k=20, align='right',  fill = NA), color = "Predicted Sales assuming no misconduct")) + # Regression line with 'conduct_period' set to zero
scale_color_manual(values = c(
'Actual Sales' = 'darkgreen',
'Predicted Sales assuming no misconduct' = 'purple')) +
labs(y = "Sales (logged)", color = 'Legend') +
theme_excel_new()
df = df %>%
mutate(predicted_zero =  predict(lm_fit, newdata = df_zero))
